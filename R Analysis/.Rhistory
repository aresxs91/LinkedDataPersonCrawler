source('~/CFAS440/Coursework 1 - Statistical Methods/CFAS440_CW_1_Q2.R')
lambda = 1/mean_f
lambda
ggplot(storm_events) +
geom_line(aes(x=duration, y=magnitude, group=event_type, colour=event_type),
alpha=0.5) +
scale_colour_gradient(low="red", high="blue") +
theme(legend.position="top")
library(ggplot2)
library(installr)
install.packages(installr)
install.packages("installr")
install.r()
installr()
install.R
install.R()
install.R(page_with_download_url = "http://cran.rstudio.com/bin/windows/base/",
pat = "R-[0-9.]+-win.exe", to_checkMD5sums = TRUE)
library(installr)
install.R(page_with_download_url = "http://cran.rstudio.com/bin/windows/base/",
pat = "R-[0-9.]+-win.exe", to_checkMD5sums = TRUE)
install.packages("Rserve")
library(Rserve)
Rserve()
rsc <- RSconnect()
install.packages("Rclient")
install.packages("RSclient")
rsc <- RSconnect()
library(RSclient)
rsc <- RSconnect()
RSshutdown(rsc)
system('tasklist /FI "IMAGENAME eq Rserve.exe"')
system('tasklist /FI "IMAGENAME eq Rserve_d.exe"')
rscd <- RSconnect(port = 7084)
rsc <- RSconnect()
RSshutdown(rsc)
system('tasklist /FI "IMAGENAME eq Rserve.exe"')
system('tasklist /FI "IMAGENAME eq Rserve_d.exe"')
require("Rserve")
require("Rserve")
system('tasklist /FI "IMAGENAME eq Rserve_d.exe"')
system('tasklist /FI "IMAGENAME eq Rserve.exe"')
RSshutdown(rsc)
rsc <- RSconnect(port = 6311)
RSshutdown(rsc)
rsc <- RSconnect(port = 6311)
RSshutdown(rsc)
system('tasklist /FI "IMAGENAME eq Rserve.exe"')
fileLocation <- "C:\Users\Ares Xs\workspace_Masters\R_Visualisation\customDatasetSalesAnalytics.tsv"
fileLocation <- "C:\\Users\Ares Xs\workspace_Masters\R_Visualisation\customDatasetSalesAnalytics.tsv"
fileLocation <- "C:\\Users\\Ares Xs\\workspace_Masters\\R_Visualisation\\customDatasetSalesAnalytics.tsv"
read.delim(sales_norm <- read.delim(fileLocation, headers = T, sep = "\t", stringsAsFactors = F, row.names = NULL, quote = ""))
sales_norm <- read.delim(fileLocation, headers = T, sep = "\t", stringsAsFactors = F, row.names = NULL, quote = ""))
sales_norm <- read.delim(fileLocation, headers = T, sep = "\t", stringsAsFactors = F, row.names = NULL, quote = "")
sales_norm <- read.delim(fileLocation, headers = T, sep = "\t",
stringsAsFactors = F, row.names = NULL, quote = "")
sales_norm <- read.delim(fileLocation, header = T, sep = "\t",
stringsAsFactors = F, row.names = NULL, quote = "")
rsc <- RSconnect(port = 6311)
require("Rserve")
require("RSclient")
rsc <- RSconnect(port = 6311)
rsc <- RSconnect()
system('tasklist /FI "IMAGENAME eq Rserve.exe"')
system('tasklist /FI "IMAGENAME eq Rserve_d.exe"')
source('C:/Users/Ares Xs/workspace_Masters/LinkedDataPersonCrawler/R Analysis/LinkedDataPersonCrawler_Analysis.R')
source('C:/Users/Ares Xs/workspace_Masters/LinkedDataPersonCrawler/R Analysis/LinkedDataPersonCrawler_Analysis.R')
install.packages("forecast", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
source('C:/Users/Ares Xs/workspace_Masters/LinkedDataPersonCrawler/R Analysis/LinkedDataPersonCrawler_Analysis.R')
library(RColorBrewer)
myColors <- brewer.pal(5, "Paired")
names(myColors) <- levels(analytics$Branches_Factor)
colScaleBranches <- scale_colour_manual(name = "Branches_Factor",values = myColors)
# Crawling duration grouped by filtered and un-filtered queries
ggplot(analytics) + geom_histogram(aes(x = Crawling_Duration,
fill = From_Country), bin = 5) +
labs(title = "Crawling duration grouped by filtered and un-filtered queries",
x = "Crawling Duration (seconds)", y = "Number of occurrences") +
theme_bw(base_size = 10)
# People found frequency categorised by branching type (from shallow to deep level)
ggplot(analytics) + geom_histogram(aes(x = People_Found,
fill = Branches_Factor), bin = 5) +
labs(title = "People found by branching category (low, medium, high)",
x = "Number of branches", y = "Number of occurrences") +
theme_bw(base_size = 10)
# Crawling duration per People found categorised by branching type
ggplot(analytics, aes(x = Crawling_Duration, y = People_Found,
colour = Branches_Factor,
fill = Branches_Factor), bin = 1) + geom_point(size = 5) +
labs(title = "Crawling duration per People found",
x = "Crawling duration (seconds)", y = "People Found") +
theme_bw(base_size = 10) + colScaleBranches
# People required per People found categorised by branching type
ggplot(analytics, aes(x = People_Required, y = People_Found,
colour = Branches_Factor,
fill = Branches_Factor), bin = 1) + geom_point(size = 5) +
labs(title = "People required per People found",
x = "People Required", y = "People Found") +
theme_bw(base_size = 10) + colScaleBranches
# Added_URIs per People found categorised by branching type
ggplot(analytics, aes(x = Added_URIs, y = People_Required,
colour = Branches_Factor,
fill = Branches_Factor), bin = 1) + geom_point(size = 5) +
labs(title = "Added_URIs per People found",
x = "Added_URIs", y = "People Found") +
theme_bw(base_size = 10) + colScaleBranches
?zoo
library(fpc)
timeSeriesAddedURIs = data.frame(analytics$Date, analytics$Added_URIs)
timeSeriesAddedURIs.zoo <- with(timeSeriesAddedURIs,
zoo(analytics.Added_URIs, order.by = analytics.Date))
timeSeriesAddedURIs.ts <- as.ts(timeSeriesAddedURIs.zoo)
library(e1071)
timeSeriesAddedURIs = data.frame(analytics$Date, analytics$Added_URIs)
timeSeriesAddedURIs.zoo <- with(timeSeriesAddedURIs,
zoo(analytics.Added_URIs, order.by = analytics.Date))
timeSeriesAddedURIs.ts <- as.ts(timeSeriesAddedURIs.zoo)
library(qualV)
timeSeriesAddedURIs = data.frame(analytics$Date, analytics$Added_URIs)
timeSeriesAddedURIs.zoo <- with(timeSeriesAddedURIs,
zoo(analytics.Added_URIs, order.by = analytics.Date))
timeSeriesAddedURIs.ts <- as.ts(timeSeriesAddedURIs.zoo)
library(fma)
timeSeriesAddedURIs = data.frame(analytics$Date, analytics$Added_URIs)
timeSeriesAddedURIs.zoo <- with(timeSeriesAddedURIs,
zoo(analytics.Added_URIs, order.by = analytics.Date))
timeSeriesAddedURIs.ts <- as.ts(timeSeriesAddedURIs.zoo)
source('C:/Users/Ares Xs/workspace_Masters/LinkedDataPersonCrawler/R Analysis/LinkedDataPersonCrawler_Analysis.R')
library(ggplot2)
library(lubridate)
library(tsoutliers)
library(fma)
wd <- "C:/Users/Ares Xs/workspace_Masters/LinkedDataPersonCrawler/R Analysis"
setwd(wd)
analytics_file <- "analytics.csv"
analytics <- read.table(analytics_file, header = T, row.names = NULL, sep = ",")
analytics$From_Country <- factor(analytics$From_Country)
analytics$Branches_Factor <- 0
# level of depth 1 - 5 with 1 being shallow and 5 being deep
for(i in 1:nrow(analytics)){
if(analytics$Branching_Times[i]<=3){
analytics$Branches_Factor[i] <- 1
} else if(analytics$Branching_Times[i]>3 && analytics$Branching_Times[i]<=6) {
analytics$Branches_Factor[i] <- 2
} else if(analytics$Branching_Times[i]>6 && analytics$Branching_Times[i]<=9) {
analytics$Branches_Factor[i] <- 3
} else if(analytics$Branching_Times[i]>9 && analytics$Branching_Times[i]<=12) {
analytics$Branches_Factor[i] <- 4
} else {
analytics$Branches_Factor[i] <- 5
}
}
analytics$Branches_Factor <- factor(analytics$Branches_Factor)
analytics$Date <- dmy_hms(analytics$Date)
library(RColorBrewer)
myColors <- brewer.pal(5, "Paired")
names(myColors) <- levels(analytics$Branches_Factor)
colScaleBranches <- scale_colour_manual(name = "Branches_Factor",values = myColors)
# Crawling duration grouped by filtered and un-filtered queries
ggplot(analytics) + geom_histogram(aes(x = Crawling_Duration,
fill = From_Country), bin = 5) +
labs(title = "Crawling duration grouped by filtered and un-filtered queries",
x = "Crawling Duration (seconds)", y = "Number of occurrences") +
theme_bw(base_size = 10)
# People found frequency categorised by branching type (from shallow to deep level)
ggplot(analytics) + geom_histogram(aes(x = People_Found,
fill = Branches_Factor), bin = 5) +
labs(title = "People found by branching category (low, medium, high)",
x = "Number of branches", y = "Number of occurrences") +
theme_bw(base_size = 10)
# Crawling duration per People found categorised by branching type
ggplot(analytics, aes(x = Crawling_Duration, y = People_Found,
colour = Branches_Factor,
fill = Branches_Factor), bin = 1) + geom_point(size = 5) +
labs(title = "Crawling duration per People found",
x = "Crawling duration (seconds)", y = "People Found") +
theme_bw(base_size = 10) + colScaleBranches
# People required per People found categorised by branching type
ggplot(analytics, aes(x = People_Required, y = People_Found,
colour = Branches_Factor,
fill = Branches_Factor), bin = 1) + geom_point(size = 5) +
labs(title = "People required per People found",
x = "People Required", y = "People Found") +
theme_bw(base_size = 10) + colScaleBranches
# Added_URIs per People found categorised by branching type
ggplot(analytics, aes(x = Added_URIs, y = People_Required,
colour = Branches_Factor,
fill = Branches_Factor), bin = 1) + geom_point(size = 5) +
labs(title = "Added_URIs per People found",
x = "Added_URIs", y = "People Found") +
theme_bw(base_size = 10) + colScaleBranches
analytics$Date <- as.POSIXct(analytics$Date)              # parse time from ISO string
analytics$Time <- format(analytics$Date, "%H:%M:%S") # transform to time string
timeSeriesCrawlingTime = data.frame(analytics$Date, analytics$Crawling_Duration)
timeSeriesCrawlingTime.zoo <- with(timeSeriesCrawlingTime,
zoo(analytics.Crawling_Duration, order.by = analytics.Date))
View(timeSeriesCrawlingTime)
library(ggplot2)
library(lubridate)
library(tsoutliers)
library(fma)
wd <- "C:/Users/Ares Xs/workspace_Masters/LinkedDataPersonCrawler/R Analysis"
setwd(wd)
analytics_file <- "analytics.csv"
analytics <- read.table(analytics_file, header = T, row.names = NULL, sep = ",")
analytics$From_Country <- factor(analytics$From_Country)
analytics$Branches_Factor <- 0
# level of depth 1 - 5 with 1 being shallow and 5 being deep
for(i in 1:nrow(analytics)){
if(analytics$Branching_Times[i]<=3){
analytics$Branches_Factor[i] <- 1
} else if(analytics$Branching_Times[i]>3 && analytics$Branching_Times[i]<=6) {
analytics$Branches_Factor[i] <- 2
} else if(analytics$Branching_Times[i]>6 && analytics$Branching_Times[i]<=9) {
analytics$Branches_Factor[i] <- 3
} else if(analytics$Branching_Times[i]>9 && analytics$Branching_Times[i]<=12) {
analytics$Branches_Factor[i] <- 4
} else {
analytics$Branches_Factor[i] <- 5
}
}
analytics$Branches_Factor <- factor(analytics$Branches_Factor)
analytics$Date <- dmy_hms(analytics$Date)
library(RColorBrewer)
myColors <- brewer.pal(5, "Paired")
names(myColors) <- levels(analytics$Branches_Factor)
colScaleBranches <- scale_colour_manual(name = "Branches_Factor",values = myColors)
# Crawling duration grouped by filtered and un-filtered queries
ggplot(analytics) + geom_histogram(aes(x = Crawling_Duration,
fill = From_Country), bin = 5) +
labs(title = "Crawling duration grouped by filtered and un-filtered queries",
x = "Crawling Duration (seconds)", y = "Number of occurrences") +
theme_bw(base_size = 10)
# People found frequency categorised by branching type (from shallow to deep level)
ggplot(analytics) + geom_histogram(aes(x = People_Found,
fill = Branches_Factor), bin = 5) +
labs(title = "People found by branching category (low, medium, high)",
x = "Number of branches", y = "Number of occurrences") +
theme_bw(base_size = 10)
# Crawling duration per People found categorised by branching type
ggplot(analytics, aes(x = Crawling_Duration, y = People_Found,
colour = Branches_Factor,
fill = Branches_Factor), bin = 1) + geom_point(size = 5) +
labs(title = "Crawling duration per People found",
x = "Crawling duration (seconds)", y = "People Found") +
theme_bw(base_size = 10) + colScaleBranches
# People required per People found categorised by branching type
ggplot(analytics, aes(x = People_Required, y = People_Found,
colour = Branches_Factor,
fill = Branches_Factor), bin = 1) + geom_point(size = 5) +
labs(title = "People required per People found",
x = "People Required", y = "People Found") +
theme_bw(base_size = 10) + colScaleBranches
# Added_URIs per People found categorised by branching type
ggplot(analytics, aes(x = Added_URIs, y = People_Required,
colour = Branches_Factor,
fill = Branches_Factor), bin = 1) + geom_point(size = 5) +
labs(title = "Added_URIs per People found",
x = "Added_URIs", y = "People Found") +
theme_bw(base_size = 10) + colScaleBranches
timeSeriesCrawlingTime = data.frame(analytics$Date, analytics$Crawling_Duration)
timeSeriesCrawlingTime.zoo <- with(timeSeriesCrawlingTime,
zoo(analytics.Crawling_Duration, order.by = analytics.Date))
timeSeriesCrawlingTime.ts <- as.ts(timeSeriesCrawlingTime.zoo)
analytics$Date <- as.POSIXct(analytics$Date)              # parse time from ISO string
analytics$Time <- format(analytics$Date, "%H:%M:%S") # transform to time string
# Time series for Crawling Time
timeSeriesCrawlingTime = data.frame(analytics$Time, analytics$Crawling_Duration)
timeSeriesCrawlingTime.zoo <- with(timeSeriesCrawlingTime,
zoo(analytics.Crawling_Duration, order.by = analytics.Time))
timeSeriesCrawlingTime.ts <- as.ts(timeSeriesCrawlingTime.zoo)
# Time series for Added URIs
timeSeriesAddedURIs = data.frame(analytics$Time, analytics$Added_URIs)
timeSeriesAddedURIs.zoo <- with(timeSeriesAddedURIs,
zoo(analytics.Added_URIs, order.by = analytics.Time))
timeSeriesAddedURIs.ts <- as.ts(timeSeriesAddedURIs.zoo)
# Time series for People Found
timeSeriesPeopleFound = data.frame(analytics$Time, analytics$People_Found)
timeSeriesPeopleFound.zoo <- with(timeSeriesPeopleFound,
zoo(analytics.People_Found,
order.by = analytics.Time))
timeSeriesPeopleFound.ts <- as.ts(timeSeriesPeopleFound.zoo)
# Outlier plots
outlier.analytics.Crawling <- tsoutliers::tso(timeSeriesCrawlingTime.ts,
types = c("AO","LS","TC", "SLS"), maxit.iloop = 10,
remove.method = "bottom-up", tsmethod = "auto.arima",
args.tsmethod = list(allowdrift = FALSE, ic = "bic"))
plot(outlier.analytics.Crawling)
outlier.analytics.AddedURIs <- tsoutliers::tso(timeSeriesAddedURIs.ts,
types = c("AO","LS","TC", "SLS"), maxit.iloop = 10,
remove.method = "bottom-up", tsmethod = "auto.arima",
args.tsmethod = list(allowdrift = FALSE, ic = "bic"))
plot(outlier.analytics.AddedURIs)
outlier.analytics.PeopleFound <- tsoutliers::tso(timeSeriesPeopleFound.ts,
types = c("AO","LS","TC", "SLS"), maxit.iloop = 10,
remove.method = "bottom-up", tsmethod = "auto.arima",
args.tsmethod = list(allowdrift = FALSE, ic = "bic"))
plot(outlier.analytics.PeopleFound)
analytics$Date <- as.POSIXct(analytics$Date)              # parse time from ISO string
analytics$Time <- format(analytics$Date, "%H:%M:%S") # transform to time string
timeSeriesCrawlingTime = data.frame(analytics$Time, analytics$Crawling_Duration)
timeSeriesCrawlingTime.zoo <- with(timeSeriesCrawlingTime,
zoo(analytics.Crawling_Duration, order.by = analytics.Time))
analytics$Date <- as.POSIXct(analytics$Date)              # parse time from ISO string
timeSeriesCrawlingTime = data.frame(analytics$Date, analytics$Crawling_Duration)
timeSeriesCrawlingTime.zoo <- with(timeSeriesCrawlingTime,
zoo(analytics.Crawling_Duration, order.by = analytics.Date))
timeSeriesCrawlingTimeAgg <-aggregate(timeSeriesCrawlingTime,
by=list(analytics.Date),
FUN=mean, na.rm=TRUE)
timeSeriesCrawlingTime.zoo <- with(timeSeriesCrawlingTimeAgg,
zoo(analytics.Crawling_Duration, order.by = analytics.Date))
timeSeriesCrawlingTimeAgg <-aggregate(timeSeriesCrawlingTime,
by=list(analytics.Date),
FUN=mean, na.rm=TRUE)
timeSeriesCrawlingTime = data.frame(analytics$Date, analytics$Crawling_Duration)
timeSeriesCrawlingTimeAgg <-aggregate(timeSeriesCrawlingTime,
by=list(analytics.Date),
FUN=mean, na.rm=TRUE)
timeSeriesCrawlingTimeAgg <-aggregate(timeSeriesCrawlingTime,
by=list(timeSeriesCrawlingTime$analytics.Date),
FUN=mean, na.rm=TRUE)
timeSeriesCrawlingTime.zoo <- with(timeSeriesCrawlingTimeAgg,
zoo(analytics.Crawling_Duration, order.by = analytics.Date))
analytics$Date <- as.POSIXct(analytics$Date)              # parse time from ISO string
analytics$Time <- format(analytics$Date, "%H:%M:%S") # transform to time string
# Time series for Crawling Time
timeSeriesCrawlingTime = data.frame(analytics$Date, analytics$Crawling_Duration)
timeSeriesCrawlingTimeAgg <-aggregate(timeSeriesCrawlingTime,
by=list(timeSeriesCrawlingTime$analytics.Date),
FUN=mean, na.rm=TRUE)
timeSeriesCrawlingTime.zoo <- with(timeSeriesCrawlingTimeAgg,
zoo(analytics.Crawling_Duration, order.by = analytics.Date))
timeSeriesCrawlingTime.ts <- as.ts(timeSeriesCrawlingTime.zoo)
# Time series for Added URIs
timeSeriesAddedURIs = data.frame(analytics$Date, analytics$Added_URIs)
timeSeriesAddedURIsAgg <-aggregate(timeSeriesAddedURIs,
by=list(timeSeriesAddedURIs$analytics.Date),
FUN=mean, na.rm=TRUE)
timeSeriesAddedURIs.zoo <- with(timeSeriesAddedURIsAgg,
zoo(analytics.Added_URIs, order.by = analytics.Date))
timeSeriesAddedURIs.ts <- as.ts(timeSeriesAddedURIs.zoo)
# Time series for People Found
timeSeriesPeopleFound = data.frame(analytics$Date, analytics$People_Found)
timeSeriesPeopleFoundAgg <-aggregate(timeSeriesPeopleFound,
by=list(timeSeriesPeopleFound$analytics.Date),
FUN=mean, na.rm=TRUE)
timeSeriesPeopleFound.zoo <- with(timeSeriesPeopleFoundAgg,
zoo(analytics.People_Found,
order.by = analytics.Date))
timeSeriesPeopleFound.ts <- as.ts(timeSeriesPeopleFound.zoo)
# Outlier plots
outlier.analytics.Crawling <- tsoutliers::tso(timeSeriesCrawlingTime.ts,
types = c("AO","LS","TC", "SLS"), maxit.iloop = 10,
remove.method = "bottom-up", tsmethod = "auto.arima",
args.tsmethod = list(allowdrift = FALSE, ic = "bic"))
plot(outlier.analytics.Crawling)
outlier.analytics.AddedURIs <- tsoutliers::tso(timeSeriesAddedURIs.ts,
types = c("AO","LS","TC", "SLS"), maxit.iloop = 10,
remove.method = "bottom-up", tsmethod = "auto.arima",
args.tsmethod = list(allowdrift = FALSE, ic = "bic"))
plot(outlier.analytics.AddedURIs)
outlier.analytics.PeopleFound <- tsoutliers::tso(timeSeriesPeopleFound.ts,
types = c("AO","LS","TC", "SLS"), maxit.iloop = 10,
remove.method = "bottom-up", tsmethod = "auto.arima",
args.tsmethod = list(allowdrift = FALSE, ic = "bic"))
plot(outlier.analytics.PeopleFound)
outlier.analytics.AddedURIs
View(analytics)
plot(analytics$Branching_Times, analytics$People_Found)
plot(analytics$Branching_Times, analytics$People_Found, type = "l")
scatter(analytics$Branching_Times, analytics$People_Found)
?scatter
ggplot() + geom_scatter(aes(x = analytics$Branching_Times, y = analytics$People_Found))
ggplot() + geom_scatterplot(aes(x = analytics$Branching_Times, y = analytics$People_Found))
?geom_scatter
?geom_scatterplot
ggplot() + geom_point(aes(x = analytics$Branching_Times, y = analytics$People_Found))
ggplot(analytics) + geom_point(aes(x = Branching_Times, y = People_Found, fill = From_Country)
)
View(analytics)
ggplot(analytics) + geom_point(aes(x = Branching_Times, y = People_Found, colour = From_Country))
ggplot(analytics) + geom_point(aes(x = Branching_Times, y = People_Found, colour = Branches_Factor))
?geom_point
ggplot(analytics) +
geom_point(aes(x = Branching_Times, y = People_Found, colour = Branches_Factor), size = 2) +
labs(title = "People Found per Branching Time",
x = "Added_URIs", y = "People Found") +
theme_bw(size = 10)
ggplot(analytics) +
geom_point(aes(x = Branching_Times, y = People_Found, colour = Branches_Factor), size = 4) +
labs(title = "People Found per Branching Time",
x = "Added_URIs", y = "People Found") +
theme_bw(base_size = 10)
?ggsave
